import discord
from discord.ext import commands
from menus import menus
import random
import asyncio
import time
import humanize
import datetime

class TicTacToe:
    __slots__ = ("player1", "player2", "ctx", "msg", "turn", "player_mapping", "x_and_o_mapping", "board")
    def __init__(self, ctx, player1, player2):
        self.player1 = player1
        self.player2 = player2
        self.ctx = ctx
        self.msg = None
        self.board = {"↖️": "⬜", "⬆️": "⬜", "↗️": "⬜",
                      "➡️": "⬜", "↘️": "⬜", "⬇️": "⬜",
                      "↙️": "⬜", "⬅️": "⬜", "⏺️": "⬜"}
        self.turn = random.choice([self.player1, self.player2])
        if self.turn == player1:
            self.player_mapping = {self.player1: "🇽", self.player2: "🅾️"}
            self.x_and_o_mapping = {"🇽": self.player1, "🅾️": self.player2}
            return
        self.player_mapping = {self.player2: "🇽", self.player1: "🅾️"}
        self.x_and_o_mapping = {"🇽": self.player2, "🅾️": self.player1}

    def show_board(self):
        return f"**Tic-Tac-Toe Game between `{self.player1}` and `{self.player2}`**\n\n" \
            f"🇽: `{self.x_and_o_mapping['🇽']}`\n🅾️: `{self.x_and_o_mapping['🅾️']}`\n\n" \
            f"{self.board['↖️']} {self.board['⬆️']} {self.board['↗️']}\n" \
            f"{self.board['⬅️']} {self.board['⏺️']} {self.board['➡️']}\n" \
            f"{self.board['↙️']} {self.board['⬇️']} {self.board['↘️']}\n\n"

    def switch_turn(self):
        if self.turn == self.player1:
            self.turn = self.player2
            return
        self.turn = self.player1

    async def loop(self):
        while True:
            try:
                move, user = await self.ctx.bot.wait_for(
                    "reaction_add",
                    check=lambda reaction, user: reaction.message.guild == self.ctx.guild
                    and reaction.message.channel == self.ctx.message.channel
                    and reaction.message == self.msg and str(reaction.emoji) in self.board.keys() and user == self.turn,
                    timeout=300
                )
            except asyncio.TimeoutError:
                await self.msg.edit(content=f"{self.show_board()}Game Over.\n**{self.turn}** took too long to move.")
                await self.ctx.send(f"{self.turn.mention} game over, you took too long to move. {self.msg.jump_url}")
                return
            if self.board[move.emoji] == "⬜":
                self.board[move.emoji] = self.player_mapping[self.turn]
            else:
                await self.msg.edit(content=f"{self.show_board()}**Current Turn**: `{self.turn}`\nThat place is already filled.")
                continue
            condition = (
                self.board["↖️"] == self.board["⬆️"] == self.board["↗️"] != "⬜",  # across the top
                self.board["⬅️"] == self.board["⏺️"] == self.board["➡️"] != "⬜",  # across the middle
                self.board["↙️"] == self.board["⬇️"] == self.board["↘️"] != "⬜",  # across the bottom
                self.board["↖️"] == self.board["⬅️"] == self.board["↙️"] != "⬜",  # down the left side
                self.board["⬆️"] == self.board["⏺️"] == self.board["⬇️"] != "⬜",  # down the middle
                self.board["↗️"] == self.board["➡️"] == self.board["↘️"] != "⬜",  # down the right side
                self.board["↖️"] == self.board["⏺️"] == self.board["↘️"] != "⬜",  # diagonal
                self.board["↙️"] == self.board["⏺️"] == self.board["↗️"] != "⬜",  # diagonal
            )
            if any(condition):
                await self.msg.edit(content=f"{self.show_board()}Game Over.\n**{self.turn}** won!")
                break
            if "⬜" not in self.board.values():
                await self.msg.edit(content=f"{self.show_board()}Game Over.\nIt's a Tie!")
                break
            self.switch_turn()
            await self.msg.edit(content=f"{self.show_board()}**Current Turn**: `{self.turn}`")

    async def start(self):
        self.msg = await self.ctx.send(f"{self.show_board()}Setting up the board...")
        for reaction in self.board.keys():
            await self.msg.add_reaction(reaction)
        await self.msg.edit(content=f"{self.show_board()}**Current Turn**: `{self.turn}`")
        await self.loop()

class fun(commands.Cog):
  def __init__(self, bot):
    self.bot = bot
  # @commands.command()
  async def tactaetoe(self, ctx, player2 : discord.Member):
    if player2 == ctx.author:
      return await ctx.send(f"ehh how u challange yourself")
    if player2.bot:
      return await ctx.send("Bot won't answer trust me :)")
    msg = await ctx.send(f"{player2.mention}, {ctx.author} wanted to play tactaetoe with you.")
    await msg.add_reaction("\N{WHITE HEAVY CHECK MARK}")
    await msg.add_reaction("\N{CROSS MARK}")
    try:
            response, _ = await ctx.bot.wait_for(
                "reaction_add",
                check=lambda reaction, user: reaction.message.guild == ctx.guild
                and reaction.message.channel == ctx.message.channel
                and reaction.message == msg
                and str(reaction.emoji) in ["\N{WHITE HEAVY CHECK MARK}", "\N{CROSS MARK}"]
                and user == player2,
                timeout=300)
    except asyncio.TimeoutError:
      return await ctx.send(f"Seems like {player2} don't want to play with you today.")
    if response.emoji == "\N{CROSS MARK}":
      return await ctx.reply(f"{player2} said no.")
    ttt = TicTacToe(ctx, ctx.author, player2)
    await ttt.start()